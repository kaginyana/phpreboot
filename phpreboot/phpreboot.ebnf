directives:
  autoalias

priorities:
  eq   = 0 left
  to   = 1 left
  bool = 2 left
  plus = 3 left
  mult = 4 left
  unary = 5 left
  xml = 6 left
  ifelse = 7 right

tokens:
  let = 'let'
  _if = 'if'
  _else = 'else'     [ifelse]
  elseif = 'elseif'  [ifelse]
  _while = 'while'
  _do = 'do'
  _for = 'for'
  foreach = 'foreach'
  function = 'function' 
  as = 'as' 
  to = 'to'     [to]
  _switch = 'switch'
  _case = 'case'
  _default = 'default'
  _return = 'return'
  _break = 'break'
  _continue = 'continue'
  echo = 'echo'
  dot = '\.'
  comma = ','
  colon = ':'
  assign = '='
  plus = '\+'   [plus]
  minus = '-'   [plus]
  mult = '\*'   [mult]
  div = '\/'    [mult]
  eq = '=='     [eq]
  ne = '!='     [eq]
  lt = '<'  [eq]
  le = '<=' [eq]
  gt = '>'  [eq]
  ge = '>=' [eq]
  or = 'or'     [bool]
  and = 'and'   [bool]
  bang = '!'    [unary]
  lcurl = '\{'
  rcurl = '\}'
  lpar = '\('
  rpar = '\)'
  lopt = '\['
  ropt = '\]'
  semi = ';'
  
  lbrack_slash = '<[( \t\r\n]*\/'
  slash_rbrack = '\/[( \t\r\n]*>'
  dollar = '\$'
  
  //SQL tokens, removed when using branching
  select = 'select'
  distinct = 'distinct'
  all = 'all'
  from = 'from'
  where = 'where'
  is = 'is'
  not = 'not'
  group = 'group'
  order = 'order'
  by = 'by'
  like = 'like'
  ordering = 'asc|desc|ascent|descent'
  spaceship = '<>'
  create = 'create'
  _table = 'table'
  unique = 'unique'
  _primary = 'primary'
  key = 'key'
  _char = 'char'
  varchar = 'varchar'
  number = 'number'
  smallint = 'smallint'
  integer = 'integer'
  _float = 'float'
  date = 'date'
  time = 'time'
  timestamp = 'timestamp'
  insert = 'insert'
  into = 'into'
  values = 'values'
  
  _any = 'any'
  _boolean = 'boolean'
  _int = 'int'
  _double = 'double'
  string = 'string'
  array = 'array'
  sequence = 'sequence'
  
  null_literal = 'null'
  bool_literal = 'true|false'
  value_literal = '([0-9]+(\.([0-9])+)?)|(0[xX][0-9a-fA-F]+)'
  string_literal = '(\u0022([^\u0022])*\u0022)|(\u0027([^\u0027])*\u0027)'
  id = '[A-Za-z_][A-Za-z0-9_]*'
  text = '[^<${]+'          [xml]
  eoln = '(\r)?\n'
  
blanks:
  space = '( |\t|\r|\n)'
  
comments:
  oneline_comment = "\/\/([^\r\n])*" 
  multiline_comment = "\/\*([^*]|[(\r)?\n]|(\*+([^*/]|((\r)?\n))))*\*+\/"
  
types:
  'id': String
  'null_literal': void
  'bool_literal': boolean
  'value_literal': Object  
  'string_literal': String
  'lcurl': void
  'rcurl': void
  'text': String
  
attributes:
  symbol: com.googlecode.phpreboot.model.Symbol
  type: com.googlecode.phpreboot.compiler.Type  
  callsite: java.dyn.CallSite
  
starts:
  script  
  
productions:           
  type = 'id'       { type }
       ;

  script = script member     { script_script_member }
         | member            { script_member }
         ; 
         
  member = fun      { member_fun } 
         | instr    { member_instr }
         ;
         
  fun = 'function' 'id' parameters block             { fun_no_return_type }
      | 'function' type 'id' parameters block        { fun_return_type }
      ; 
 
  parameter = type 'id'  { parameter_typed }
            | 'id'       { parameter_any }
            ;    
            
  parameters = '(' parameter/'comma'* ')'   { parameters }
             ;
         
  block = '{' instr* '}'            { block }
        ;
             
  action =      { action }
         ;           
             
  eoi = 'eoln'
      | ';'
      ;           
              
  instr = assignment eoi                            { instr_assign }
        | declaration eoi                           { instr_decl }
        | funcall eoi                               { instr_funcall }
        | 'echo' expr eoi                           { instr_echo }
        | action 'if' '(' expr ')' instr else_if    { instr_if }
        | label labeled_instr                       { instr_labeled }
        | 'return' expr? eoi                        { instr_return }
        | 'break' 'id'? eoi                         { instr_break }
        | 'continue' 'id'? eoi                      { instr_continue }
        | block                                     { instr_block }
        | action xmls                               { instr_xmls }
        ;
        
  assignment = 'id' '=' expr                  { assignment_id }
             | 'id' '.' 'id' '=' expr         { assignment_field } 
             | primary '.' 'id' '=' expr      { assignment_primary_field }
             | 'id' '[' expr ']' '=' expr     { assignment_array } 
             | primary '[' expr ']' '=' expr  { assignment_primary_array }
             ; 
             
  declaration = type 'id'              { declaration_type_empty }
              | type 'id' '=' expr     { declaration_type_init }
              | 'let' 'id' '=' expr    { declaration_let }
              ;           
     
  funcall = 'id' '(' expr/'comma'* ')'   { funcall }
          ;
        
  label = 'id' ':'          { label_id }
        |                   { label_empty }
        ;       
        
  labeled_instr = 'while' '(' expr ')' instr                             { labeled_instr_while }
                | 'do' instr 'while' '(' expr ')' eoi                    { labeled_instr_do_while }
                | 'for' '(' for_init? ';' expr? ';' for_step? ')' instr  { labeled_instr_for }
                | 'foreach' '(' expr 'as' 'id' ')' instr                 { labeled_instr_foreach }
                | 'foreach' '(' expr 'as' 'id' ':' 'id' ')' instr        { labeled_instr_foreach_entry }
                | 'switch' '(' expr ')' '{' inner_switch* '}'            { labeled_instr_switch }
                ;
       
  for_init = declaration        { for_init_declaration }
           | assignment         { for_init_assignment }
           | funcall            { for_init_funcall }
           ;
           
  for_step = assignment         { for_step_assignment }
           | funcall            { for_step_funcall }
           ;
              
  inner_switch = 'case' literal ':'   { inner_switch_case }
               | instr                { inner_switch_instr }
               | 'default' ':'        { inner_switch_default }
               ;
        
  else_if = 'elseif' '(' expr ')' instr else_if              { else_if_else_if }
          | 'else' instr                                     { else_if_else }
          |                                        [ifelse]  { else_if_empty }
          ;
  
  literal = single_literal                     { literal_single }
          | '[' array_value/'comma'* ']'       { literal_array }
          | '{' array_entry/'comma'* '}'       { literal_array_entry }
          ; 
          
  single_literal = 'null_literal'      { literal_null }
                 | 'bool_literal'      { literal_bool }
                 | 'value_literal'     { literal_value }
                 | 'string_literal'    { literal_string }
                 ;
  
  array_entry = expr ':' expr   { array_entry }
              ;
          
  array_value = expr            { array_value_single }
              | array_entry     { array_value_entry }
              ;
              
  
  
  primary = 'id' '[' expr ']'       { primary_array_access }     
          | primary '[' expr ']'    { primary_primary_array_access }                          
          | 'id' '.' 'id'           { primary_field_access }
          | primary '.' 'id'        { primary_primary_field_access }                  
          | '(' expr ')'            { primary_parens }
          | funcall                 { primary_funcall }
          ;
  
  expr = 'id'                                         { expr_id }
       | literal                                      { expr_literal }
       | primary                                      { expr_primary }
       | '+' expr                          [unary]    { expr_unary_plus }
       | '-' expr                          [unary]    { expr_unary_minus }
       | '!' expr                          [unary]    { expr_unary_not }
       | expr '+' expr                     [plus]     { expr_plus }
       | expr '-' expr                     [plus]     { expr_minus }
       | expr '*' expr                     [mult]     { expr_mult }
       | expr '/' expr                     [mult]     { expr_div }
       | expr '==' expr                    [eq]       { expr_eq }
       | expr '!=' expr                    [eq]       { expr_ne }
       | expr '<' expr                     [eq]       { expr_lt }
       | expr '<=' expr                    [eq]       { expr_le }
       | expr '>' expr                     [eq]       { expr_gt }
       | expr '>=' expr                    [eq]       { expr_ge }
       | expr 'or' expr                    [bool]     { expr_or }
       | expr 'and' expr                   [bool]     { expr_and }
       | expr 'to' type                    [to]       { expr_to_type }
       | 'function' parameters block                  { expr_fun }
       | xmls                                         { expr_xmls }
       ;
       
   dollar_access = '$' 'id'                { dollar_access_id }
                 | '$' '(' expr ')'        { dollar_access_expr }
                 ;    
       
   xmls = '<' 'id' attrs '>' content 'lbrack_slash' 'id' '>'     { xmls_start_end_tag }
        | '<' 'id' attrs 'slash_rbrack'                          { xmls_empty_tag }
        ;
       
   content = content xmls                     { content_xmls }
           | content 'text'                   { content_text }
           | content block                    { content_block }
           | content dollar_access            { content_dollar_access }
           |                                  { content_empty }
           ;
           
   attrs = attrs 'id' '=' dollar_access        { attrs_dollar_access }
         | attrs 'id' '=' 'string_literal'     { attrs_string_literal }
         |                                     { attrs_empty }
         ;