  const size = 16000
  echo "P4\n#{" + size + "} #{ " + size + "}"

  const ITER = 50           // Mandelbrot iterations
  const LIMIT_SQUARED = 4.0 // Presquared limit

  byte_acc = 0
  bit_num = 0
  const count_size = size - 1   // Precomputed size
 
  y = 0
  while (y < size) {
    x = 0
    while (x < size) {
      zr = 0.0
      zi = 0.0
      cr = (2.0*x/size)-1.5
      ci = (2.0*y/size)-1.0
      escape = false

      zrzr = zr*zr
      zizi = zi*zi
      
      i = 0
      while (i < ITER) {
        tr = zrzr - zizi + cr
        ti = 2.0*zr*zi + ci
        zr = tr
        zi = ti
        // preserve recalculation
        zrzr = zr*zr
        zizi = zi*zi
        if (zrzr + zizi > LIMIT_SQUARED) {
          escape = true
          break
        }
        
        i = i + 1
      }

      byte_acc = bits_or(bits_shl(byte_acc, 1), (escape ? 0 : 1))
      bit_num = bit_num + 1

      // Code is very similar for these cases, but using separate blocks
      // ensures we skip the shifting when it's unnecessary, which is most cases.
      if (bit_num == 8) {
        echo_byte(byte_acc)
        byte_acc = 0
        bit_num = 0
      } elseif (x == count_size) {
        byte_acc = bits_shl(byte_acc, (8 - bit_num))
        echo_byte(byte_acc)
        byte_acc = 0
        bit_num = 0
      }
      
      x = x + 1
    }
    
    y = y + 1
  }
